// ********RoostGPT********
/*
Test generated by RoostGPT for test pomXmlTest using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Identical Objects
- Given two identical Address objects
- When the equals method is called on one of them with the other as an argument
- Then the result should be true

Test Scenario 2: Different Objects
- Given two different Address objects
- When the equals method is called on one of them with the other as an argument
- Then the result should be false

Test Scenario 3: Null Object
- Given an Address object and a null value
- When the equals method is called on the Address object with null as an argument
- Then the result should be false

Test Scenario 4: Different Class Object
- Given an Address object and an object of a different class
- When the equals method is called on the Address object with the different class object as an argument
- Then the result should be false

Test Scenario 5: Object Equals Itself
- Given an Address object
- When the equals method is called on this object with itself as an argument
- Then the result should be true

Test Scenario 6: Different Addresses with Same Values
- Given two different Address objects with identical street1, city, and zipcode values
- When the equals method is called on one of them with the other as an argument
- Then the result should be true

Test Scenario 7: Different Addresses with Different Street1
- Given two different Address objects with different street1, but identical city and zipcode
- When the equals method is called on one of them with the other as an argument
- Then the result should be false

Test Scenario 8: Different Addresses with Different City
- Given two different Address objects with different city, but identical street1 and zipcode
- When the equals method is called on one of them with the other as an argument
- Then the result should be false

Test Scenario 9: Different Addresses with Different Zipcode
- Given two different Address objects with different zipcode, but identical street1 and city
- When the equals method is called on one of them with the other as an argument
- Then the result should be false
*/

// ********RoostGPT********
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class Address_equals_f2d574000d_Test {

    @Test
    void testIdenticalObjects() {
        Country country = new Country("ISO", "Name", "PrintableName", "ISO3", "NumCode");
        Address address1 = new Address("Street1", "City", "Zipcode", country);
        Address address2 = new Address("Street1", "City", "Zipcode", country);
        assertTrue(address1.equals(address2));
    }

    @Test
    void testDifferentObjects() {
        Country country = new Country("ISO", "Name", "PrintableName", "ISO3", "NumCode");
        Address address1 = new Address("Street1", "City", "Zipcode", country);
        Address address2 = new Address("Street2", "City", "Zipcode", country);
        assertFalse(address1.equals(address2));
    }

    @Test
    void testNullObject() {
        Country country = new Country("ISO", "Name", "PrintableName", "ISO3", "NumCode");
        Address address1 = new Address("Street1", "City", "Zipcode", country);
        assertFalse(address1.equals(null));
    }

    @Test
    void testDifferentClassObject() {
        Country country = new Country("ISO", "Name", "PrintableName", "ISO3", "NumCode");
        Address address1 = new Address("Street1", "City", "Zipcode", country);
        assertFalse(address1.equals(country));
    }

    @Test
    void testObjectEqualsItself() {
        Country country = new Country("ISO", "Name", "PrintableName", "ISO3", "NumCode");
        Address address1 = new Address("Street1", "City", "Zipcode", country);
        assertTrue(address1.equals(address1));
    }

    @Test
    void testDifferentAddressesWithSameValues() {
        Country country = new Country("ISO", "Name", "PrintableName", "ISO3", "NumCode");
        Address address1 = new Address("Street1", "City", "Zipcode", country);
        Address address2 = new Address("Street1", "City", "Zipcode", country);
        assertTrue(address1.equals(address2));
    }

    @Test
    void testDifferentAddressesWithDifferentStreet1() {
        Country country = new Country("ISO", "Name", "PrintableName", "ISO3", "NumCode");
        Address address1 = new Address("Street1", "City", "Zipcode", country);
        Address address2 = new Address("Street2", "City", "Zipcode", country);
        assertFalse(address1.equals(address2));
    }

    @Test
    void testDifferentAddressesWithDifferentCity() {
        Country country = new Country("ISO", "Name", "PrintableName", "ISO3", "NumCode");
        Address address1 = new Address("Street1", "City1", "Zipcode", country);
        Address address2 = new Address("Street1", "City2", "Zipcode", country);
        assertFalse(address1.equals(address2));
    }

    @Test
    void testDifferentAddressesWithDifferentZipcode() {
        Country country = new Country("ISO", "Name", "PrintableName", "ISO3", "NumCode");
        Address address1 = new Address("Street1", "City", "Zipcode1", country);
        Address address2 = new Address("Street1", "City", "Zipcode2", country);
        assertFalse(address1.equals(address2));
    }

}
