// ********RoostGPT********
/*
Test generated by RoostGPT for test pomXmlTest using AI Type Open AI and AI Model gpt-4

1. Scenario: Validate the hashCode function when the quantity and item are both null.
   Expected Result: The function should return 0 as the hash code.

2. Scenario: Validate the hashCode function when the quantity is null, but the item is not.
   Expected Result: The function should return the hash code of the item.

3. Scenario: Validate the hashCode function when the item is null, but the quantity is not.
   Expected Result: The function should return the hash code of the quantity.

4. Scenario: Validate the hashCode function when the quantity and item are not null and different from each other.
   Expected Result: The function should return a unique hash code that is a combination of the hash codes of the quantity and item.

5. Scenario: Validate the hashCode function when the quantity and item are not null and the same.
   Expected Result: The function should return a hash code that is the same as the hash code of either the quantity or the item.

6. Scenario: Validate the hashCode function when the quantity and item are both the same non-null object.
   Expected Result: The function should return a hash code that is the same as the hash code of the object.

7. Scenario: Validate the hashCode function when the quantity and item are both the same object, but that object is null.
   Expected Result: The function should return 0 as the hash code.

8. Scenario: Validate the hashCode function when the quantity and item are different non-null objects.
   Expected Result: The function should return a unique hash code that is a combination of the hash codes of the quantity and item.

9. Scenario: Validate the hashCode function when the quantity is a negative integer and the item is a non-null object.
   Expected Result: The function should return a unique hash code that is a combination of the hash codes of the quantity and item.

10. Scenario: Validate the hashCode function when the quantity is a positive integer and the item is a non-null object.
    Expected Result: The function should return a unique hash code that is a combination of the hash codes of the quantity and item. 

11. Scenario: Validate the hashCode function when the quantity is zero and the item is a non-null object.
    Expected Result: The function should return a hash code that is the same as the hash code of the item.
*/

// ********RoostGPT********
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Objects;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

public class OrderLine_hashCode_5a2657087a_Test {

    private OrderLine orderLine;

    @BeforeEach
    public void setUp() {
        orderLine = new OrderLine();
    }

    @Test
    public void testHashCodeWithBothNull() {
        orderLine.setQuantity(null);
        orderLine.setItem(null);
        assertEquals(Objects.hash(null, null), orderLine.hashCode());
    }

    @Test
    public void testHashCodeWithQuantityNull() {
        orderLine.setQuantity(null);
        orderLine.setItem(new Item());
        assertEquals(Objects.hash(null, orderLine.getItem()), orderLine.hashCode());
    }

    @Test
    public void testHashCodeWithItemNull() {
        orderLine.setQuantity(5);
        orderLine.setItem(null);
        assertEquals(Objects.hash(orderLine.getQuantity(), null), orderLine.hashCode());
    }

    @Test
    public void testHashCodeWithNonNullOrDifferentQuantityAndItem() {
        orderLine.setQuantity(5);
        orderLine.setItem(new Item());
        assertEquals(Objects.hash(orderLine.getQuantity(), orderLine.getItem()), orderLine.hashCode());
    }

    @Test
    public void testHashCodeWithSameQuantityAndItem() {
        orderLine.setQuantity(5);
        Item item = new Item();
        orderLine.setItem(item);
        assertEquals(Objects.hash(orderLine.getQuantity(), orderLine.getItem()), orderLine.hashCode());
    }

    @Test
    public void testHashCodeWithSameNonNullQuantityAndItem() {
        orderLine.setQuantity(5);
        orderLine.setItem(new Item("Item1", 10.0f, "path1", "description1", null));
        orderLine.getItem().setId(5L);
        assertEquals(Objects.hash(orderLine.getQuantity(), orderLine.getItem()), orderLine.hashCode());
    }

    @Test
    public void testHashCodeWithDifferentNonNullQuantityAndItem() {
        orderLine.setQuantity(5);
        orderLine.setItem(new Item("Item1", 10.0f, "path1", "description1", null));
        assertNotEquals(Objects.hash(orderLine.getQuantity(), orderLine.getItem()), orderLine.hashCode());
    }

    @Test
    public void testHashCodeWithNegativeQuantityAndNonNullItem() {
        orderLine.setQuantity(-5);
        orderLine.setItem(new Item("Item1", 10.0f, "path1", "description1", null));
        assertEquals(Objects.hash(orderLine.getQuantity(), orderLine.getItem()), orderLine.hashCode());
    }

    @Test
    public void testHashCodeWithPositiveQuantityAndNonNullItem() {
        orderLine.setQuantity(5);
        orderLine.setItem(new Item("Item1", 10.0f, "path1", "description1", null));
        assertEquals(Objects.hash(orderLine.getQuantity(), orderLine.getItem()), orderLine.hashCode());
    }

    @Test
    public void testHashCodeWithZeroQuantityAndNonNullItem() {
        orderLine.setQuantity(0);
        orderLine.setItem(new Item("Item1", 10.0f, "path1", "description1", null));
        assertEquals(Objects.hash(orderLine.getQuantity(), orderLine.getItem()), orderLine.hashCode());
    }
}
