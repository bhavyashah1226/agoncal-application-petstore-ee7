// ********RoostGPT********
/*
Test generated by RoostGPT for test pomXmlTest using AI Type Open AI and AI Model gpt-4

1. Scenario: Validate hash code generation when 'name' is a non-empty string.
   Test Case: Provide a non-empty string as 'name' and check if the hashCode() method generates a unique hash code.

2. Scenario: Validate hash code generation when 'name' is an empty string.
   Test Case: Provide an empty string as 'name' and check if the hashCode() method generates a hash code.

3. Scenario: Validate hash code generation when 'name' is null.
   Test Case: Provide null as 'name' and check if the hashCode() method generates a hash code.

4. Scenario: Validate hash code consistency.
   Test Case: Provide the same 'name' multiple times and check if the hashCode() method generates the same hash code every time.

5. Scenario: Validate hash code uniqueness.
   Test Case: Provide different 'name' values and check if the hashCode() method generates different hash codes for different inputs.

6. Scenario: Validate hash code generation for long 'name' values.
   Test Case: Provide a 'name' value with a length exceeding the normal string length and check if the hashCode() method can handle it and generates a hash code.

7. Scenario: Validate hash code generation for 'name' values with special characters.
   Test Case: Provide a 'name' value with special characters and check if the hashCode() method can handle it and generates a hash code.

8. Scenario: Validate hash code generation for 'name' values with spaces.
   Test Case: Provide a 'name' value with spaces and check if the hashCode() method can handle it and generates a hash code.

9. Scenario: Validate hash code generation for numeric 'name' values.
   Test Case: Provide a numeric 'name' value and check if the hashCode() method can handle it and generates a hash code.

10. Scenario: Validate hash code generation for 'name' values with alphanumeric characters.
    Test Case: Provide a 'name' value with alphanumeric characters and check if the hashCode() method can handle it and generates a hash code.
*/

// ********RoostGPT********
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Test;

import java.util.Objects;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

public class Category_hashCode_5a2657087a_Test {

    @Test
    public void testHashCodeWithNonEmptyName() {
        Category category = new Category();
        category.setName("Test");
        int expectedHashCode = Objects.hash("Test");
        assertEquals(expectedHashCode, category.hashCode());
    }

    @Test
    public void testHashCodeWithEmptyName() {
        Category category = new Category();
        category.setName("");
        int expectedHashCode = Objects.hash("");
        assertEquals(expectedHashCode, category.hashCode());
    }

    @Test
    public void testHashCodeWithNullName() {
        Category category = new Category();
        category.setName(null);
        int expectedHashCode = Objects.hash((Object) null);
        assertEquals(expectedHashCode, category.hashCode());
    }

    @Test
    public void testHashCodeConsistency() {
        Category category = new Category();
        category.setName("ConsistencyTest");
        int initialHashCode = category.hashCode();
        for (int i = 0; i < 100; i++) {
            assertEquals(initialHashCode, category.hashCode());
        }
    }

    @Test
    public void testHashCodeUniqueness() {
        Category category1 = new Category();
        Category category2 = new Category();
        category1.setName("Test1");
        category2.setName("Test2");
        assertNotEquals(category1.hashCode(), category2.hashCode());
    }

    @Test
    public void testHashCodeWithLongName() {
        Category category = new Category();
        category.setName("ThisIsAVeryLongNameThatExceedsTheNormalLengthOfAString");
        int expectedHashCode = Objects.hash("ThisIsAVeryLongNameThatExceedsTheNormalLengthOfAString");
        assertEquals(expectedHashCode, category.hashCode());
    }

    @Test
    public void testHashCodeWithSpecialCharacters() {
        Category category = new Category();
        category.setName("@#$%^&*()!");
        int expectedHashCode = Objects.hash("@#$%^&*()!");
        assertEquals(expectedHashCode, category.hashCode());
    }

    @Test
    public void testHashCodeWithSpaces() {
        Category category = new Category();
        category.setName("Test With Spaces");
        int expectedHashCode = Objects.hash("Test With Spaces");
        assertEquals(expectedHashCode, category.hashCode());
    }

    @Test
    public void testHashCodeWithNumericValues() {
        Category category = new Category();
        category.setName("123456");
        int expectedHashCode = Objects.hash("123456");
        assertEquals(expectedHashCode, category.hashCode());
    }

    @Test
    public void testHashCodeWithAlphanumericValues() {
        Category category = new Category();
        category.setName("Test123");
        int expectedHashCode = Objects.hash("Test123");
        assertEquals(expectedHashCode, category.hashCode());
    }
}
