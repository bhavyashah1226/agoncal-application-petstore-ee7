// ********RoostGPT********
/*
Test generated by RoostGPT for test pomXmlTest using AI Type Open AI and AI Model gpt-4

Scenario 1: Null Name Value
- Test to check whether the function returns null when the name field is null.

Scenario 2: Empty Name Value
- Test to check whether the function returns an empty string when the name field is an empty string.

Scenario 3: Name Value with Only Spaces
- Test to check whether the function returns a string with only spaces when the name field contains only spaces.

Scenario 4: Single Word Name Value
- Test to check whether the function returns the correct single word string when the name field contains a single word.

Scenario 5: Multiple Words Name Value
- Test to check whether the function returns the correct multiple words string when the name field contains multiple words.

Scenario 6: Name Value with Special Characters
- Test to check whether the function returns the correct string with special characters when the name field contains special characters.

Scenario 7: Name Value with Numbers
- Test to check whether the function returns the correct string with numbers when the name field contains numbers.

Scenario 8: Name Value with Combination of Alphanumeric Characters and Special Characters
- Test to check whether the function returns the correct string when the name field contains a combination of alphanumeric characters and special characters.

Scenario 9: Long Name Value
- Test to check whether the function returns the correct string when the name field contains a very long string.

Scenario 10: Name Value with Leading and Trailing Spaces
- Test to check whether the function returns the correct string, including leading and trailing spaces, when the name field contains such a string.
*/

// ********RoostGPT********
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Category_toString_ceffa8036e_Test {

    @Test
    public void testToStringNullName() {
        Category category = new Category();
        category.setName(null);
        assertNull(category.toString());
    }

    @Test
    public void testToStringEmptyName() {
        Category category = new Category();
        category.setName("");
        assertEquals("", category.toString());
    }

    @Test
    public void testToStringNameWithSpaces() {
        Category category = new Category();
        category.setName("     ");
        assertEquals("     ", category.toString());
    }

    @Test
    public void testToStringSingleWordName() {
        Category category = new Category();
        category.setName("TestName");
        assertEquals("TestName", category.toString());
    }

    @Test
    public void testToStringMultipleWordsName() {
        Category category = new Category();
        category.setName("Test Name with Spaces");
        assertEquals("Test Name with Spaces", category.toString());
    }

    @Test
    public void testToStringNameWithSpecialCharacters() {
        Category category = new Category();
        category.setName("Test@Name#With$Special%Characters^");
        assertEquals("Test@Name#With$Special%Characters^", category.toString());
    }

    @Test
    public void testToStringNameWithNumbers() {
        Category category = new Category();
        category.setName("Test123Name456");
        assertEquals("Test123Name456", category.toString());
    }

    @Test
    public void testToStringNameWithAlphanumericAndSpecialCharacters() {
        Category category = new Category();
        category.setName("Test123@Name456#");
        assertEquals("Test123@Name456#", category.toString());
    }

    @Test
    public void testToStringLongName() {
        Category category = new Category();
        category.setName("ThisIsAVeryLongTestNameWithMultipleWordsAndSpecialCharacters@#");
        assertEquals("ThisIsAVeryLongTestNameWithMultipleWordsAndSpecialCharacters@#", category.toString());
    }

    @Test
    public void testToStringNameWithLeadingAndTrailingSpaces() {
        Category category = new Category();
        category.setName("   TestName   ");
        assertEquals("   TestName   ", category.toString());
    }
}
