// ********RoostGPT********
/*
Test generated by RoostGPT for test pomXmlTest using AI Type Open AI and AI Model gpt-4

1. Scenario: Test when the object passed as a parameter is null.
   - Expectation: The equals function should return false as the object is null.

2. Scenario: Test when the object passed as a parameter is the same as the current object.
   - Expectation: The equals function should return true as both are the same object.

3. Scenario: Test when the object passed as a parameter is of a different class.
   - Expectation: The equals function should return false as the classes of the objects are different.

4. Scenario: Test when the object passed as a parameter is of the same class but the 'name' and 'description' attributes are different.
   - Expectation: The equals function should return false as the 'name' and 'description' attributes are different.

5. Scenario: Test when the object passed as a parameter is of the same class and the 'name' attribute is the same but 'description' attribute is different.
   - Expectation: The equals function should return false as the 'description' attribute is different.

6. Scenario: Test when the object passed as a parameter is of the same class and the 'description' attribute is the same but 'name' attribute is different.
   - Expectation: The equals function should return false as the 'name' attribute is different.

7. Scenario: Test when the object passed as a parameter is of the same class and both 'name' and 'description' attributes are the same.
   - Expectation: The equals function should return true as both 'name' and 'description' attributes are the same.

8. Scenario: Test when the object passed as a parameter is of the same class but the 'name' attribute is null in one of the objects.
   - Expectation: The equals function should return false as the 'name' attribute is null in one of the objects.

9. Scenario: Test when the object passed as a parameter is of the same class but the 'description' attribute is null in one of the objects.
   - Expectation: The equals function should return false as the 'description' attribute is null in one of the objects.

10. Scenario: Test when the object passed as a parameter is of the same class and both 'name' and 'description' attributes are null in both objects.
    - Expectation: The equals function should return true as both 'name' and 'description' attributes are null in both objects.
*/

// ********RoostGPT********
import org.junit.Assert;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.agoncal.application.petstore.model.Item;
import org.agoncal.application.petstore.model.Product;

public class Item_equals_f2d574000d_Test {

    private Item itemUnderTest;
    private Product testProduct;

    @BeforeEach
    public void setUp() {
        testProduct = new Product("Product1", "Product Desc", null);
        itemUnderTest = new Item("Item1", 10.0F, "path", "Item desc", testProduct);
    }

    @Test
    public void testEquals_NullObject() {
        Assert.assertFalse(itemUnderTest.equals(null));
    }

    @Test
    public void testEquals_SameObject() {
        Assert.assertTrue(itemUnderTest.equals(itemUnderTest));
    }

    @Test
    public void testEquals_DifferentClass() {
        Assert.assertFalse(itemUnderTest.equals(new String("test")));
    }

    @Test
    public void testEquals_DifferentNameAndDescription() {
        Item otherItem = new Item("Item2", 10.0F, "path", "Item desc 2", testProduct);
        Assert.assertFalse(itemUnderTest.equals(otherItem));
    }

    @Test
    public void testEquals_SameNameDifferentDescription() {
        Item otherItem = new Item("Item1", 10.0F, "path", "Item desc 2", testProduct);
        Assert.assertFalse(itemUnderTest.equals(otherItem));
    }

    @Test
    public void testEquals_DifferentNameSameDescription() {
        Item otherItem = new Item("Item2", 10.0F, "path", "Item desc", testProduct);
        Assert.assertFalse(itemUnderTest.equals(otherItem));
    }

    @Test
    public void testEquals_SameNameAndDescription() {
        Item otherItem = new Item("Item1", 10.0F, "path", "Item desc", testProduct);
        Assert.assertTrue(itemUnderTest.equals(otherItem));
    }

    @Test
    public void testEquals_NullNameInOneObject() {
        Item otherItem = new Item(null, 10.0F, "path", "Item desc", testProduct);
        Assert.assertFalse(itemUnderTest.equals(otherItem));
    }

    @Test
    public void testEquals_NullDescriptionInOneObject() {
        Item otherItem = new Item("Item1", 10.0F, "path", null, testProduct);
        Assert.assertFalse(itemUnderTest.equals(otherItem));
    }

    @Test
    public void testEquals_NullNameAndDescriptionInBothObjects() {
        Item otherItem = new Item(null, 10.0F, "path", null, testProduct);
        itemUnderTest.setName(null);
        itemUnderTest.setDescription(null);
        Assert.assertTrue(itemUnderTest.equals(otherItem));
    }
}
