// ********RoostGPT********
/*
Test generated by RoostGPT for test pomXmlTest using AI Type Open AI and AI Model gpt-4

1. Scenario: Test when the object 'o' is the same as the current object
   - Given: the object 'o' is the same as the current object
   - Expected result: The function should return true

2. Scenario: Test when the object 'o' is null
   - Given: the object 'o' is null
   - Expected result: The function should return false

3. Scenario: Test when the class type of object 'o' is not the same as the current object
   - Given: the object 'o' has a different class type than the current object
   - Expected result: The function should return false

4. Scenario: Test when the class type of object 'o' is the same as the current object but the 'quantity' field is not the same
   - Given: the object 'o' has the same class type as the current object but the 'quantity' field is not the same
   - Expected result: The function should return false

5. Scenario: Test when the class type of object 'o' is the same as the current object but the 'item' field is not the same
   - Given: the object 'o' has the same class type as the current object but the 'item' field is not the same
   - Expected result: The function should return false

6. Scenario: Test when the class type of object 'o' is the same as the current object and both 'quantity' and 'item' fields are the same
   - Given: the object 'o' has the same class type as the current object and both 'quantity' and 'item' fields are the same
   - Expected result: The function should return true

7. Scenario: Test when 'quantity' and 'item' fields in the current object are null
   - Given: 'quantity' and 'item' fields in the current object are null
   - Expected result: The function should handle null values appropriately

8. Scenario: Test when 'quantity' and 'item' fields in the object 'o' are null
   - Given: 'quantity' and 'item' fields in the object 'o' are null
   - Expected result: The function should handle null values appropriately

*/

// ********RoostGPT********
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class OrderLine_equals_f2d574000d_Test {

    private OrderLine orderLine1;
    private OrderLine orderLine2;
    private Item item1;
    private Item item2;

    @BeforeEach
    void setUp() {
        item1 = new Item("Item1",10f,"path1","description1",null);
        item2 = new Item("Item2",20f,"path2","description2",null);

        orderLine1 = new OrderLine(2, item1);
        orderLine2 = new OrderLine(3, item2);
    }

    @Test
    void testEquals_SameObject() {
        assertTrue(orderLine1.equals(orderLine1));
    }

    @Test
    void testEquals_NullObject() {
        assertFalse(orderLine1.equals(null));
    }

    @Test
    void testEquals_DifferentClass() {
        assertFalse(orderLine1.equals(new String()));
    }

    @Test
    void testEquals_DifferentQuantity() {
        OrderLine orderLine3 = new OrderLine(3, item1);
        assertFalse(orderLine1.equals(orderLine3));
    }

    @Test
    void testEquals_DifferentItem() {
        OrderLine orderLine4 = new OrderLine(2, item2);
        assertFalse(orderLine1.equals(orderLine4));
    }

    @Test
    void testEquals_SameQuantityAndItem() {
        OrderLine orderLine5 = new OrderLine(2, item1);
        assertTrue(orderLine1.equals(orderLine5));
    }

    @Test
    void testEquals_NullFieldsInCurrentObject() {
        OrderLine orderLine6 = new OrderLine(null, null);
        assertFalse(orderLine6.equals(orderLine1));
    }

    @Test
    void testEquals_NullFieldsInGivenObject() {
        OrderLine orderLine7 = new OrderLine(null, null);
        assertFalse(orderLine1.equals(orderLine7));
    }
}
