// ********RoostGPT********
/*
Test generated by RoostGPT for test pomXmlTest using AI Type Open AI and AI Model gpt-4

1. Scenario: Test when both `orderDate` and `customer` are null.
   Expected Result: The `hashCode` method should return 0 in this scenario.

2. Scenario: Test when `orderDate` is null and `customer` is not null.
   Expected Result: The `hashCode` method should return the hash code of the `customer` object.

3. Scenario: Test when `orderDate` is not null and `customer` is null.
   Expected Result: The `hashCode` method should return the hash code of the `orderDate` object.

4. Scenario: Test when both `orderDate` and `customer` are not null.
   Expected Result: The `hashCode` method should return a hash code that is a combination of the hash codes of the `orderDate` and `customer` objects.

5. Scenario: Test when `orderDate` and `customer` are the same objects.
   Expected Result: The `hashCode` method should return a hash code that is twice the hash code of the `orderDate` or `customer`.

6. Scenario: Test when `orderDate` and `customer` are different objects.
   Expected Result: The `hashCode` method should return a hash code that is different from the hash codes of the `orderDate` and `customer` objects.

7. Scenario: Test when `orderDate` and `customer` have equal hash codes but are different objects.
   Expected Result: The `hashCode` method should return a hash code that is twice the hash code of the `orderDate` or `customer`.

8. Scenario: Test when `orderDate` is a future date and `customer` is a valid object.
   Expected Result: The `hashCode` method should return a valid hash code.

9. Scenario: Test when `orderDate` is a past date and `customer` is a valid object.
   Expected Result: The `hashCode` method should return a valid hash code.

10. Scenario: Test when `orderDate` is the current date and time and `customer` is a valid object.
    Expected Result: The `hashCode` method should return a valid hash code.

Please note that the actual hash code values in the expected results would depend on the implementation of the hash function in the `Objects` class and the `hashCode` methods of the `Date` and `Customer` classes.
*/

// ********RoostGPT********
import org.junit.Test;
import static org.junit.Assert.*;
import org.agoncal.application.petstore.model.*;

public class PurchaseOrder_hashCode_5a2657087a_Test {
    
    @Test
    public void testHashCodeWhenOrderDateAndCustomerAreNull() {
        PurchaseOrder purchaseOrder = new PurchaseOrder();
        purchaseOrder.setOrderDate(null);
        purchaseOrder.setCustomer(null);

        int hashCode = purchaseOrder.hashCode();

        assertEquals(0, hashCode);
    }

    @Test
    public void testHashCodeWhenOrderDateIsNullAndCustomerIsNotNull() {
        PurchaseOrder purchaseOrder = new PurchaseOrder();
        purchaseOrder.setOrderDate(null);
        Customer customer = new Customer();
        purchaseOrder.setCustomer(customer);

        int hashCode = purchaseOrder.hashCode();

        assertEquals(customer.hashCode(), hashCode);
    }

    @Test
    public void testHashCodeWhenOrderDateIsNotNullAndCustomerIsNull() {
        PurchaseOrder purchaseOrder = new PurchaseOrder();
        Date orderDate = new Date();
        purchaseOrder.setOrderDate(orderDate);
        purchaseOrder.setCustomer(null);

        int hashCode = purchaseOrder.hashCode();

        assertEquals(orderDate.hashCode(), hashCode);
    }

    @Test
    public void testHashCodeWhenOrderDateAndCustomerAreNotNull() {
        PurchaseOrder purchaseOrder = new PurchaseOrder();
        Date orderDate = new Date();
        purchaseOrder.setOrderDate(orderDate);
        Customer customer = new Customer();
        purchaseOrder.setCustomer(customer);

        int hashCode = purchaseOrder.hashCode();

        int expectedHashCode = Objects.hash(orderDate, customer);
        assertEquals(expectedHashCode, hashCode);
    }

    @Test
    public void testHashCodeWhenOrderDateAndCustomerAreTheSame() {
        PurchaseOrder purchaseOrder = new PurchaseOrder();
        Date orderDate = new Date();
        purchaseOrder.setOrderDate(orderDate);
        Customer customer = (Customer) orderDate;
        purchaseOrder.setCustomer(customer);

        int hashCode = purchaseOrder.hashCode();

        int expectedHashCode = 2 * Objects.hash(orderDate);
        assertEquals(expectedHashCode, hashCode);
    }
}
