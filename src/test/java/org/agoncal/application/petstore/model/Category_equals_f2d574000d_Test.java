// ********RoostGPT********
/*
Test generated by RoostGPT for test pomXmlTest using AI Type Open AI and AI Model gpt-4

1. Scenario: Object is same as itself
   Given an object that has been initialized
   When the equals method is called with the same object as a parameter
   Then the method should return true

2. Scenario: Object is null
   Given an object that has been initialized
   When the equals method is called with null as a parameter
   Then the method should return false

3. Scenario: Object is of different class
   Given an object that has been initialized
   When the equals method is called with an object of a different class as a parameter
   Then the method should return false

4. Scenario: Object is of same class but different name
   Given two objects of the same class that have been initialized with different names
   When the equals method is called with the second object as a parameter
   Then the method should return false

5. Scenario: Object is of same class and same name
   Given two objects of the same class that have been initialized with the same name
   When the equals method is called with the second object as a parameter
   Then the method should return true

6. Scenario: Object is of same class and name is null
   Given two objects of the same class where one has a null name
   When the equals method is called with the second object as a parameter
   Then the method should return false

7. Scenario: Both objects' names are null
   Given two objects of the same class where both objects have null names
   When the equals method is called with the second object as a parameter
   Then the method should return true if the equals implementation considers null names to be equal, false otherwise.
*/

// ********RoostGPT********
package org.agoncal.application.petstore.model;

import org.junit.Test;
import static org.junit.Assert.*;

public class Category_equals_f2d574000d_Test {

    @Test
    public void testSameObject() {
        Category category = new Category("category1", "description1");
        assertTrue(category.equals(category));
    }

    @Test
    public void testNullObject() {
        Category category = new Category("category1", "description1");
        assertFalse(category.equals(null));
    }

    @Test
    public void testDifferentClassObject() {
        Category category = new Category("category1", "description1");
        assertFalse(category.equals(new String("category1")));
    }

    @Test
    public void testSameClassDifferentName() {
        Category category1 = new Category("category1", "description1");
        Category category2 = new Category("category2", "description2");
        assertFalse(category1.equals(category2));
    }

    @Test
    public void testSameClassSameName() {
        Category category1 = new Category("category1", "description1");
        Category category2 = new Category("category1", "description2");
        assertTrue(category1.equals(category2));
    }

    @Test
    public void testSameClassNullName() {
        Category category1 = new Category(null, "description1");
        Category category2 = new Category("category1", "description2");
        assertFalse(category1.equals(category2));
    }

    @Test
    public void testSameClassBothNullNames() {
        Category category1 = new Category(null, "description1");
        Category category2 = new Category(null, "description2");
        assertTrue(category1.equals(category2));
    }
}
