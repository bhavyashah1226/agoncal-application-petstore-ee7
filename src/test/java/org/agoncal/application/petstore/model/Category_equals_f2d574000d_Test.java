// ********RoostGPT********
/*
Test generated by RoostGPT for test pomXmlTest using AI Type Open AI and AI Model gpt-4

1. Scenario: Object Comparison with Itself
   Test Case: Compare an object with itself and expect the result to be true. This is because the `equals` method should return true for the same object.

2. Scenario: Comparison with Null
   Test Case: Compare an object with null and expect the result to be false. This is because the `equals` method should return false when comparing any object with null.

3. Scenario: Comparison with Different Class Object
   Test Case: Compare an object with an object of a different class and expect the result to be false. This is because the `equals` method should return false when comparing objects of different classes.

4. Scenario: Comparison with Same Class but Different Name
   Test Case: Compare two objects of the same class but with different names and expect the result to be false. This is because the `equals` method should return false when comparing objects with different names.

5. Scenario: Comparison with Same Class and Same Name
   Test Case: Compare two objects of the same class and with the same name and expect the result to be true. This is because the `equals` method should return true when comparing objects with the same name.

6. Scenario: Comparison with Same Class but Null Name
   Test Case: Compare two objects of the same class where one or both objects have a null name and expect the result to be false. This is because the `equals` method should return false when comparing objects with a null name. 

Note: The last scenario assumes that the `name` field is Nullable. If it's not, the scenario can be ignored.
*/

// ********RoostGPT********
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Category_equals_f2d574000d_Test {

    @Test
    public void testEqualsWithItself() {
        Category category = new Category("name", "description");
        assertTrue(category.equals(category));
    }

    @Test
    public void testEqualsWithNull() {
        Category category = new Category("name", "description");
        assertFalse(category.equals(null));
    }

    @Test
    public void testEqualsWithDifferentClass() {
        Category category = new Category("name", "description");
        Object object = new Object();
        assertFalse(category.equals(object));
    }

    @Test
    public void testEqualsWithSameClassDifferentName() {
        Category category1 = new Category("name1", "description");
        Category category2 = new Category("name2", "description");
        assertFalse(category1.equals(category2));
    }

    @Test
    public void testEqualsWithSameClassSameName() {
        Category category1 = new Category("name", "description");
        Category category2 = new Category("name", "description");
        assertTrue(category1.equals(category2));
    }

    @Test
    public void testEqualsWithSameClassNullName() {
        Category category1 = new Category(null, "description");
        Category category2 = new Category("name", "description");
        assertFalse(category1.equals(category2));
    }

}
