// ********RoostGPT********
/*
Test generated by RoostGPT for test pomXmlTest using AI Type Open AI and AI Model gpt-4

1. Scenario: Verify if the Logger instance is correctly produced when a valid InjectionPoint is provided
   Given a valid InjectionPoint instance, when the `produceLogger` method is called, then it should create a Logger instance with the name of the class from the InjectionPoint.

2. Scenario: Ensure the Logger is correctly associated with the class from the InjectionPoint
   Given a class injected through InjectionPoint, when the `produceLogger` method is called, then it should create a Logger instance associated with that class.

3. Scenario: Check if the Logger instance is produced correctly when InjectionPoint is related to a non-class member
   Given an InjectionPoint related to a non-class member, when the `produceLogger` method is called, then it should create a Logger instance with the name of the class that owns the member.

4. Scenario: Verify if the Logger instance is correctly produced when the InjectionPoint is associated with a static member
   Given an InjectionPoint associated with a static member of a class, when the `produceLogger` method is called, then it should create a Logger instance with the name of the class that owns the static member.

5. Scenario: Check how the function handles a null InjectionPoint
   Given a null InjectionPoint, when the `produceLogger` method is called, then it should throw an appropriate exception.

6. Scenario: Check how the function handles an InjectionPoint with a null member
   Given an InjectionPoint with a null member, when the `produceLogger` method is called, then it should throw an appropriate exception.

7. Scenario: Check how the function handles an InjectionPoint with a member that has a null declaring class
   Given an InjectionPoint with a member that has a null declaring class, when the `produceLogger` method is called, then it should throw an appropriate exception.

8. Scenario: Verify the Logger instance creation with multiple InjectionPoints
   Given multiple InjectionPoints associated with different classes, when the `produceLogger` method is called for each of them, then it should create distinct Logger instances associated with each of the classes. 

9. Scenario: Verify the Logger instance creation with the same InjectionPoint multiple times
   Given the same InjectionPoint, when the `produceLogger` method is called multiple times, then it should return the same Logger instance each time. 

10. Scenario: Check if the Logger instance is correctly produced when the InjectionPoint is associated with an inner class
    Given an InjectionPoint associated with an inner class, when the `produceLogger` method is called, then it should create a Logger instance with the name of the inner class.
*/

// ********RoostGPT********
package org.agoncal.application.petstore.util;

import javax.enterprise.inject.spi.InjectionPoint;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class LoggingProducer_produceLogger_0dae710c17_Test {

    @Test
    void testProduceLogger_validInjectionPoint() {
        InjectionPoint injectionPoint = mock(InjectionPoint.class);
        when(injectionPoint.getMember().getDeclaringClass()).thenReturn(LoggingProducer.class);

        LoggingProducer producer = new LoggingProducer();
        Logger logger = producer.produceLogger(injectionPoint);

        assertNotNull(logger);
        assertEquals(LoggingProducer.class.getName(), logger.getName());
    }

    @Test
    void testProduceLogger_nullInjectionPoint() {
        LoggingProducer producer = new LoggingProducer();

        assertThrows(NullPointerException.class, () -> {
            producer.produceLogger(null);
        });
    }

    @Test
    void testProduceLogger_nullMemberInjectionPoint() {
        InjectionPoint injectionPoint = mock(InjectionPoint.class);
        when(injectionPoint.getMember()).thenReturn(null);

        LoggingProducer producer = new LoggingProducer();

        assertThrows(NullPointerException.class, () -> {
            producer.produceLogger(injectionPoint);
        });
    }

    @Test
    void testProduceLogger_nullDeclaringClassInjectionPoint() {
        InjectionPoint injectionPoint = mock(InjectionPoint.class);
        when(injectionPoint.getMember().getDeclaringClass()).thenReturn(null);

        LoggingProducer producer = new LoggingProducer();

        assertThrows(NullPointerException.class, () -> {
            producer.produceLogger(injectionPoint);
        });
    }

    @Test
    void testProduceLogger_sameInjectionPoint() {
        InjectionPoint injectionPoint = mock(InjectionPoint.class);
        when(injectionPoint.getMember().getDeclaringClass()).thenReturn(LoggingProducer.class);

        LoggingProducer producer = new LoggingProducer();
        Logger logger1 = producer.produceLogger(injectionPoint);
        Logger logger2 = producer.produceLogger(injectionPoint);

        assertNotNull(logger1);
        assertNotNull(logger2);
        assertSame(logger1, logger2);
    }
}
