// ********RoostGPT********
/*
Test generated by RoostGPT for test pomXmlTest using AI Type Open AI and AI Model gpt-4

Scenario 1: Valid InjectionPoint
Given that a valid InjectionPoint object is provided as input to the produceLogger function, the test should assert that the Logger object returned by the function is not null and has the correct class name.

Scenario 2: Null InjectionPoint
Given that a null object is provided as input to the produceLogger function, the test should assert that a NullPointerException is thrown.

Scenario 3: InjectionPoint with Null Member
Given that an InjectionPoint object with a null Member is provided as input to the produceLogger function, the test should assert that a NullPointerException is thrown.

Scenario 4: InjectionPoint with Non-Null Member but Null Declaring Class
Given that an InjectionPoint object with a non-null Member but a null Declaring Class is provided as input to the produceLogger function, the test should assert that a NullPointerException is thrown.

Scenario 5: Multiple calls with the same InjectionPoint
Given that the produceLogger function is called multiple times with the same InjectionPoint object, the test should assert that the Logger objects returned by each call have the same class name.

Scenario 6: Multiple calls with different InjectionPoints
Given that the produceLogger function is called multiple times with different InjectionPoint objects, the test should assert that the Logger objects returned by each call have different class names corresponding to their respective InjectionPoint objects. 

Scenario 7: InjectionPoint with Member from Anonymous Class
Given that an InjectionPoint object with a Member from an anonymous class is provided as input to the produceLogger function, the test should assert that the Logger object returned has the correct class name, including the anonymous class notation. 

Scenario 8: InjectionPoint with Member from Inner Class
Given that an InjectionPoint object with a Member from an inner class is provided as input to the produceLogger function, the test should assert that the Logger object returned has the correct class name, including the inner class notation.
*/

// ********RoostGPT********
package org.agoncal.application.petstore.util;

import javax.enterprise.inject.spi.InjectionPoint;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.mockito.Mockito;
import java.lang.reflect.Member;

import static org.junit.jupiter.api.Assertions.*;

public class LoggingProducer_produceLogger_0dae710c17_Test {

    private LoggingProducer loggingProducer;
    private InjectionPoint mockInjectionPoint;
    private Member mockMember;

    @BeforeEach
    public void setup() {
        loggingProducer = new LoggingProducer();
        mockInjectionPoint = Mockito.mock(InjectionPoint.class);
        mockMember = Mockito.mock(Member.class);
    }

    @Test
    public void testProduceLogger_ValidInjectionPoint() {
        Mockito.when(mockInjectionPoint.getMember()).thenReturn(mockMember);
        Mockito.when(mockMember.getDeclaringClass()).thenReturn(LoggingProducer.class);

        Logger logger = loggingProducer.produceLogger(mockInjectionPoint);

        assertNotNull(logger);
        assertEquals(LoggingProducer.class.getName(), logger.getName());
    }

    @Test
    public void testProduceLogger_NullInjectionPoint() {
        assertThrows(NullPointerException.class, () -> loggingProducer.produceLogger(null));
    }

    @Test
    public void testProduceLogger_InjectionPointWithNullMember() {
        Mockito.when(mockInjectionPoint.getMember()).thenReturn(null);

        assertThrows(NullPointerException.class, () -> loggingProducer.produceLogger(mockInjectionPoint));
    }

    @Test
    public void testProduceLogger_InjectionPointWithNonNullMemberButNullDeclaringClass() {
        Mockito.when(mockInjectionPoint.getMember()).thenReturn(mockMember);
        Mockito.when(mockMember.getDeclaringClass()).thenReturn(null);

        assertThrows(NullPointerException.class, () -> loggingProducer.produceLogger(mockInjectionPoint));
    }

    @Test
    public void testProduceLogger_MultipleCallsWithTheSameInjectionPoint() {
        Mockito.when(mockInjectionPoint.getMember()).thenReturn(mockMember);
        Mockito.when(mockMember.getDeclaringClass()).thenReturn(LoggingProducer.class);

        Logger logger1 = loggingProducer.produceLogger(mockInjectionPoint);
        Logger logger2 = loggingProducer.produceLogger(mockInjectionPoint);

        assertNotNull(logger1);
        assertNotNull(logger2);
        assertEquals(logger1.getName(), logger2.getName());
    }

    @Test
    public void testProduceLogger_MultipleCallsWithDifferentInjectionPoints() {
        InjectionPoint mockInjectionPoint2 = Mockito.mock(InjectionPoint.class);
        Member mockMember2 = Mockito.mock(Member.class);

        Mockito.when(mockInjectionPoint.getMember()).thenReturn(mockMember);
        Mockito.when(mockMember.getDeclaringClass()).thenReturn(LoggingProducer.class);

        Mockito.when(mockInjectionPoint2.getMember()).thenReturn(mockMember2);
        Mockito.when(mockMember2.getDeclaringClass()).thenReturn(Logger.class);

        Logger logger1 = loggingProducer.produceLogger(mockInjectionPoint);
        Logger logger2 = loggingProducer.produceLogger(mockInjectionPoint2);

        assertNotNull(logger1);
        assertNotNull(logger2);
        assertNotEquals(logger1.getName(), logger2.getName());
    }

    @Test
    public void testProduceLogger_InjectionPointWithMemberFromAnonymousClass() {
        Mockito.when(mockInjectionPoint.getMember()).thenReturn(mockMember);
        Mockito.when(mockMember.getDeclaringClass()).thenReturn(new Object(){}.getClass());

        Logger logger = loggingProducer.produceLogger(mockInjectionPoint);

        assertNotNull(logger);
        assertTrue(logger.getName().contains("Object$1"));
    }

    @Test
    public void testProduceLogger_InjectionPointWithMemberFromInnerClass() {
        class InnerClass {}

        Mockito.when(mockInjectionPoint.getMember()).thenReturn(mockMember);
        Mockito.when(mockMember.getDeclaringClass()).thenReturn(InnerClass.class);

        Logger logger = loggingProducer.produceLogger(mockInjectionPoint);

        assertNotNull(logger);
        assertEquals("org.agoncal.application.petstore.util.LoggingProducer_produceLogger_0dae710c17_Test$InnerClass", logger.getName());
    }
}
