// ********RoostGPT********
/*
Test generated by RoostGPT for test pomXmlTest using AI Type Open AI and AI Model gpt-4

Scenario 1: Valid InjectionPoint
Given that the InjectionPoint is valid and the getMember method of the InjectionPoint returns a valid Member object
When the produceLogger method is called with this InjectionPoint
Then a Logger object should be returned
And the Logger's name should be the same as the name of the class that declares the Member object

Scenario 2: Null InjectionPoint
Given that the InjectionPoint is null
When the produceLogger method is called with this InjectionPoint
Then a NullPointerException should be thrown

Scenario 3: Invalid Member from InjectionPoint
Given that the getMember method of the InjectionPoint returns null
When the produceLogger method is called with this InjectionPoint
Then a NullPointerException should be thrown

Scenario 4: Valid Member but Invalid Declaring Class
Given that the getMember method of the InjectionPoint returns a valid Member object, but the getDeclaringClass method of the Member object returns null
When the produceLogger method is called with this InjectionPoint
Then a NullPointerException should be thrown

Scenario 5: Valid Member and Declaring Class but Invalid Class Name
Given that the getMember method of the InjectionPoint returns a valid Member object, the getDeclaringClass method of the Member object returns a valid Class object, but the getName method of the Class object returns null
When the produceLogger method is called with this InjectionPoint
Then a NullPointerException should be thrown

Scenario 6: Valid Member and Declaring Class but Empty Class Name
Given that the getMember method of the InjectionPoint returns a valid Member object, the getDeclaringClass method of the Member object returns a valid Class object, but the getName method of the Class object returns an empty string
When the produceLogger method is called with this InjectionPoint
Then a Logger object should be returned
And the Logger's name should be an empty string.
*/

// ********RoostGPT********
package org.agoncal.application.petstore.util;

import javax.enterprise.inject.spi.InjectionPoint;
import java.lang.reflect.Member;
import java.util.logging.Logger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class LoggingProducer_produceLogger_0dae710c17_Test {

    private LoggingProducer loggingProducer;
    private InjectionPoint injectionPoint;
    private Member member;

    @BeforeEach
    public void setup() {
        loggingProducer = new LoggingProducer();
        injectionPoint = mock(InjectionPoint.class);
        member = mock(Member.class);
    }

    @Test
    public void testProduceLogger_ValidInjectionPoint() {
        when(injectionPoint.getMember()).thenReturn(member);
        when(member.getDeclaringClass()).thenReturn(LoggingProducer.class);

        Logger logger = loggingProducer.produceLogger(injectionPoint);

        assertNotNull(logger);
        assertEquals(LoggingProducer.class.getName(), logger.getName());
    }

    @Test
    public void testProduceLogger_NullInjectionPoint() {
        assertThrows(NullPointerException.class, () -> loggingProducer.produceLogger(null));
    }

    @Test
    public void testProduceLogger_NullMember() {
        when(injectionPoint.getMember()).thenReturn(null);

        assertThrows(NullPointerException.class, () -> loggingProducer.produceLogger(injectionPoint));
    }

    @Test
    public void testProduceLogger_NullDeclaringClass() {
        when(injectionPoint.getMember()).thenReturn(member);
        when(member.getDeclaringClass()).thenReturn(null);

        assertThrows(NullPointerException.class, () -> loggingProducer.produceLogger(injectionPoint));
    }

    @Test
    public void testProduceLogger_NullClassName() {
        Class<?> clazz = mock(Class.class);
        when(injectionPoint.getMember()).thenReturn(member);
        when(member.getDeclaringClass()).thenReturn(clazz);
        when(clazz.getName()).thenReturn(null);

        assertThrows(NullPointerException.class, () -> loggingProducer.produceLogger(injectionPoint));
    }

    @Test
    public void testProduceLogger_EmptyClassName() {
        Class<?> clazz = mock(Class.class);
        when(injectionPoint.getMember()).thenReturn(member);
        when(member.getDeclaringClass()).thenReturn(clazz);
        when(clazz.getName()).thenReturn("");

        Logger logger = loggingProducer.produceLogger(injectionPoint);

        assertNotNull(logger);
        assertEquals("", logger.getName());
    }
}
