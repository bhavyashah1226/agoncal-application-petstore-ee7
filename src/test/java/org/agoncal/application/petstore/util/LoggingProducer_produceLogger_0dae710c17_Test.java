// ********RoostGPT********
/*
Test generated by RoostGPT for test pomXmlTest using AI Type Open AI and AI Model gpt-4

Scenario 1: Valid InjectionPoint
Given that the InjectionPoint is valid and contains a Member object, when the produceLogger method is called, then it should return a Logger instance with the name of the declaring class of the Member.

Scenario 2: Null InjectionPoint
Given that the InjectionPoint is null, when the produceLogger method is called, then it should throw a NullPointerException.

Scenario 3: InjectionPoint with Null Member
Given that the InjectionPoint contains a null Member, when the produceLogger method is called, then it should throw a NullPointerException.

Scenario 4: InjectionPoint with Member having Null DeclaringClass
Given that the InjectionPoint contains a Member whose declaring class is null, when the produceLogger method is called, then it should throw a NullPointerException.

Scenario 5: InjectionPoint with Member having Empty DeclaringClass Name
Given that the InjectionPoint contains a Member whose declaring class name is an empty string, when the produceLogger method is called, then it should return a Logger instance with an empty name.

Scenario 6: Multiple Calls with Same InjectionPoint
Given that the InjectionPoint is valid and the produceLogger method is called multiple times with the same InjectionPoint, then it should return Logger instances with the same name each time.

Scenario 7: Multiple Calls with Different InjectionPoints
Given that the InjectionPoints are valid and the produceLogger method is called multiple times with different InjectionPoints, then it should return Logger instances with names corresponding to the declaring classes of the Members in the respective InjectionPoints.
*/

// ********RoostGPT********
package org.agoncal.application.petstore.util;

import javax.enterprise.inject.spi.InjectionPoint;
import java.util.logging.Logger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class LoggingProducer_produceLogger_0dae710c17_Test {

    private LoggingProducer loggingProducer;
    private InjectionPoint injectionPoint;

    @BeforeEach
    public void setup() {
        loggingProducer = new LoggingProducer();
        injectionPoint = mock(InjectionPoint.class);
    }

    @Test
    public void testProduceLogger_ValidInjectionPoint() {
        when(injectionPoint.getMember().getDeclaringClass().getName()).thenReturn("org.agoncal.application.petstore.util.LoggingProducer");
        Logger logger = loggingProducer.produceLogger(injectionPoint);
        assertNotNull(logger);
        assertEquals("org.agoncal.application.petstore.util.LoggingProducer", logger.getName());
    }

    @Test
    public void testProduceLogger_NullInjectionPoint() {
        assertThrows(NullPointerException.class, () -> loggingProducer.produceLogger(null));
    }

    @Test
    public void testProduceLogger_InjectionPointWithNullMember() {
        when(injectionPoint.getMember()).thenReturn(null);
        assertThrows(NullPointerException.class, () -> loggingProducer.produceLogger(injectionPoint));
    }

    @Test
    public void testProduceLogger_InjectionPointWithMemberHavingNullDeclaringClass() {
        when(injectionPoint.getMember().getDeclaringClass()).thenReturn(null);
        assertThrows(NullPointerException.class, () -> loggingProducer.produceLogger(injectionPoint));
    }

    @Test
    public void testProduceLogger_InjectionPointWithMemberHavingEmptyDeclaringClassName() {
        when(injectionPoint.getMember().getDeclaringClass().getName()).thenReturn("");
        Logger logger = loggingProducer.produceLogger(injectionPoint);
        assertNotNull(logger);
        assertEquals("", logger.getName());
    }

    @Test
    public void testProduceLogger_MultipleCallsWithSameInjectionPoint() {
        when(injectionPoint.getMember().getDeclaringClass().getName()).thenReturn("org.agoncal.application.petstore.util.LoggingProducer");
        Logger logger1 = loggingProducer.produceLogger(injectionPoint);
        Logger logger2 = loggingProducer.produceLogger(injectionPoint);
        assertNotNull(logger1);
        assertNotNull(logger2);
        assertEquals(logger1.getName(), logger2.getName());
    }

    @Test
    public void testProduceLogger_MultipleCallsWithDifferentInjectionPoints() {
        InjectionPoint injectionPoint2 = mock(InjectionPoint.class);
        when(injectionPoint.getMember().getDeclaringClass().getName()).thenReturn("org.agoncal.application.petstore.util.LoggingProducer");
        when(injectionPoint2.getMember().getDeclaringClass().getName()).thenReturn("org.agoncal.application.petstore.util.LoggingProducer2");
        Logger logger1 = loggingProducer.produceLogger(injectionPoint);
        Logger logger2 = loggingProducer.produceLogger(injectionPoint2);
        assertNotNull(logger1);
        assertNotNull(logger2);
        assertNotEquals(logger1.getName(), logger2.getName());
    }
}
