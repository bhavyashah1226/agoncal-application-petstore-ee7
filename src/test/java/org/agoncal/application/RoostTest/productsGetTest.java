// ********RoostGPT********
/*
Test generated by RoostGPT for test ZBIO-4912-Rest-Assured-Testing using AI Type Open AI and AI Model gpt-4

Test generated for /products_get for http method type GET in rest-assured framework

RoostTestHash=ed0d766b50


*/

// ********RoostGPT********

package org.agoncal.application.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class productsGetTest {

    List<Map<String, String>> envList = new ArrayList<>();

    @Before
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      envList = dataloader.loadData("src/test/java/org/agoncal/application/RoostTest/productsGetTest.csv");
    }

    // Test case is failing due to null target host. The BASE_URL from the test data may not be correctly initialized or not available.
    // Ensure the test data file is correctly populated and the BASE_URL is accessible.
    @Test  
    public void productsGet_Test() {
        this.setUp();
        for (Map<String, String> map : envList) {
          if (map.get("BASE_URL") != null) {
            RestAssured.baseURI = map.get("BASE_URL");  
  
            Response response = given()
            .when()
            .get("/products")  
            .then() 
            .extract().response();    
         
            if (response.statusCode() == 200) {
              System.out.println("Description: Successful operation");
      
              if (response.jsonPath().get("id") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("id"), instanceOf(Integer.class));  
              }
      
              if (response.jsonPath().get("name") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("name"), instanceOf(String.class));  
              }
      
              if (response.jsonPath().get("description") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("description"), instanceOf(String.class));  
              }
      
              if (response.jsonPath().get("price") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("price"), instanceOf(Integer.class));  
              }
            }
          } else {
            System.out.println("BASE_URL is null in the test data");
          }  
        }  
    }
}
